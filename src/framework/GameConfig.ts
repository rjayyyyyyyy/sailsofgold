export interface IGameConfig {
    hasMysteryJackpot: boolean;
    hasGuaranteedJackpot: boolean;
    jackpots: null | any;
    disableSwipeToFullscreenPortraitIos: boolean;
    disableSwipeToFullscreenLandscapeIos: boolean;
    disableSwipeToFullscreenIos: boolean;
    swipeToHideIosBlacklist: string;
    defaultHyperSpin: boolean;
    disableHyperSpin: boolean;
    disableVideoActivationScreen: boolean;
    alwaysShowDecimals: boolean;
    useExternalBalanceOnly: boolean;
    disableScrollToFullscreenMessage: boolean;
    bundleMode: number;
    disableInGameModals: boolean;
    disableInGameFreeGamesModals: boolean;
    disableFastplay: boolean;
    unsupportedDeviceMessage: string;
    jackpotNotifications: boolean;
    bgColor: string;
    hideExit: boolean;
    hideHelp: boolean;
    hideHistory: boolean;
    hideFastplay: boolean;
    hideLobby: boolean;
    hideSound: boolean;
    hideAutoAdjustBet: boolean;
    hideSpaceBarToSpin: boolean;
    disableHistory: boolean;
    disableHelp: boolean;
    disableSound: boolean;
    enforceRoundTime: boolean;
    spinLimitEnabled: boolean;
    spinLimitInterval: number;
    spinLimitExpectedSpinTime: number;
    spinLimitMinCooloffTime: number;
    spinLimitMaxCooloffTime: number;
    spinLimitFixedCooloffTime: number;
    spinLimitDisplayCooloff: number;
    spinLimitDisplayIdleTimeCountdown: number;
    spinLimitIdleTimeCountdownThreshold: number;
    spinLimitRoundIdleTimeEnabled: boolean;
    spinLimitRoundIdleTimeTimerThreshold: number;
    regularSpinTime: number;
    minQuickRoundTime: number;
    autoPlayResume: boolean;
    disableSpacebarToSpin: boolean;
    resourceLevel: number;
    videoLevel: string;
    fps: number;
    matchId: string;
    betMaxMode: number;
    betMaxSpin: boolean;
    playForRealDelay: number;
    renderer: string;
    disableExitInRound: boolean;
    cId: string;
    defaultFastPlay: boolean;
    defaultSpacebarToSpin: boolean;
    defaultSound: boolean;
    disableFastplayQuestion: boolean;
    disableVideo: string;
    requiredPlatformFeatureSupport: string;
    customDeviceBlockRegex: string;
    debug: boolean;
    debugAlert: boolean;
    fullScreenMode: boolean;
    defaultAutoAdjustBet: boolean;
    defaultAutoSpins: string;
    limits: string;
    autoSpins: string;
    cashierUrl: string;
    lobbyUrl: string;
    mobileGameHistoryUrl: string;
    gameModules: string; // JSON string representing game modules
    useBrowserStorage: number;
    availableModules: any[];
    uiVersion: string;
    gameURL: string;
    playForRealUrl: string;
    desktopGameHistoryUrl: string;
    hasInGameJackpots: boolean;
    hasFreeInGameJackpots: boolean;
    enforceShowGameName: boolean;
    disableMobileBlurHandling: boolean;
    integrationErrorCodes: string; // JSON string representing error codes
    autoplayReset: boolean;
    autoplayLimits: boolean;
    settings: string;
    resourceRoot: string;
    showSplash: boolean;
    loaderMessage: string;
    loaderMinShowDuration: number;
    realityCheck: string;
    hasJackpots: boolean;
    helpUrl: string;
    showClientVersionInHelp: boolean;
    showFFGamesVersionInHelp: boolean;
    disableAutoplay: boolean;
    enforceAutoplayStopAtFreeSpins: boolean;
    enforceAutoplayStopAtBonus: boolean;
    betLossPresentation: boolean;
    waterMark: boolean;
    displayClock: boolean;
    useServerTime: boolean;
    rCmga: number;
    minRoundTime: number;
    detailedFreegameMessage: boolean;
    minSpinningTime: string;
    creditDisplay: number;
    pingIncreaseInterval: number;
    minPingTime: number;
    maxPingTime: null | number;
    baccaratHistory: number;
    gameRoundBalanceCheck: boolean;
    quickStopEnabled: boolean;
    neverGamble: boolean;
    autoHold: boolean;
    denom: string;
    brand: string;
    defaultLimit: number;
    freeGameEndLogout: boolean;
    lines: number;
    mjDemoText: string;
    mjsupportmessage: string;
    mjcongratulations: string;
    mjprizes: string;
    mjnames: string;
    freeSpinLimit: number;
}

export function parseConfig(json: string): IGameConfig {
    try {
        return JSON.parse(json) as IGameConfig;
    } catch (error) {
        throw new Error(`Failed to parse config JSON: ${error}`);
    }
} 